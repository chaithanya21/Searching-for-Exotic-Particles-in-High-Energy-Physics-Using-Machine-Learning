{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Decision_Tree_Classifier","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"pKTzXGUDDFUj","colab_type":"text"},"source":["**IMPLEMENTATION OF THE DT CLASSIFIER ALGORITHM**"]},{"cell_type":"code","metadata":{"id":"FvTFBxVfVPyM","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import scipy\n","import matplotlib.pyplot as plt\n","import h5py\n","import itertools  \n","import time"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XRD5IAf4VYgJ","colab_type":"code","colab":{}},"source":["url='https://archive.ics.uci.edu/ml/machine-learning-databases/00279/SUSY.csv.gz'"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ePbDpeQAVc4L","colab_type":"code","colab":{}},"source":["coloumn_names=['Class_Label','lepton 1PT','lepton 1 eta','lepton 1 phi','lepton 2PT','lepton 2 eta',\n","              'lepton 2 phi','missing energy magnitude','missing energy phi','MET_rel','axial_MET','M_R','M_TR_2','R',\n","              'MT2','S_R','M_Delta','dphi_r_b','cos(theta_r1)']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8m-Rb-1WVeka","colab_type":"code","colab":{}},"source":["susy=pd.read_csv(url,header=None,index_col=False,names=coloumn_names)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2YGAyCW2Vgip","colab_type":"code","colab":{}},"source":["susy.head()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bYkDFMC7ViPG","colab_type":"code","colab":{}},"source":["Features=susy.drop('Class_Label',axis=1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PcuxG24cVlQD","colab_type":"code","colab":{}},"source":["Features.head()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zF4tFjeUVnEu","colab_type":"code","colab":{}},"source":["Labels=susy['Class_Label']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"l9z4E0QiVqA7","colab_type":"code","outputId":"62be0db0-a978-40f3-e7a0-d6f8969fe6d7","executionInfo":{"status":"ok","timestamp":1572773286884,"user_tz":-330,"elapsed":85399,"user":{"displayName":"Charan Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAmUQs3ZyrBVa8DVyfsFABrw_sG3xpbPh5YeIoi2g=s64","userId":"11399043314986540413"}},"colab":{"base_uri":"https://localhost:8080/","height":121}},"source":["Labels.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    0.0\n","1    1.0\n","2    1.0\n","3    1.0\n","4    1.0\n","Name: Class_Label, dtype: float64"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"klm9PrXPVsxr","colab_type":"code","outputId":"2e32d71c-085e-41bb-f978-8a20404c328b","executionInfo":{"status":"ok","timestamp":1572773286885,"user_tz":-330,"elapsed":85383,"user":{"displayName":"Charan Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAmUQs3ZyrBVa8DVyfsFABrw_sG3xpbPh5YeIoi2g=s64","userId":"11399043314986540413"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(Features.shape , Labels.shape)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["(5000000, 18) (5000000,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"-Ty6u8bZVv6w","colab_type":"code","colab":{}},"source":["from sklearn.tree import DecisionTreeClassifier \n","from sklearn.model_selection import train_test_split,StratifiedKFold,cross_validate\n","from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, make_scorer"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eMONouhQV0nE","colab_type":"code","colab":{}},"source":["x_train,x_test,y_train,y_test=train_test_split(Features,Labels,test_size=0.3,random_state=1,shuffle=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9indmA9fXz1j","colab_type":"code","outputId":"24adc2e6-e36b-4825-c7c9-8401e843b253","executionInfo":{"status":"ok","timestamp":1572773289496,"user_tz":-330,"elapsed":87972,"user":{"displayName":"Charan Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAmUQs3ZyrBVa8DVyfsFABrw_sG3xpbPh5YeIoi2g=s64","userId":"11399043314986540413"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(x_train.shape,x_test.shape,y_train.shape,y_test.shape)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["(3500000, 18) (1500000, 18) (3500000,) (1500000,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"LP_U8TvJYW6G","colab_type":"code","outputId":"171539cb-7d5a-4848-b6eb-75b5b23aec4e","executionInfo":{"status":"ok","timestamp":1572773289499,"user_tz":-330,"elapsed":87960,"user":{"displayName":"Charan Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAmUQs3ZyrBVa8DVyfsFABrw_sG3xpbPh5YeIoi2g=s64","userId":"11399043314986540413"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["for dataset in [y_train,y_test]:\n","    print(round(len(dataset) / len(Labels), 2))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["0.7\n","0.3\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"dsy3xrEMYoq-","colab_type":"code","colab":{}},"source":["DT=DecisionTreeClassifier(criterion=\"gini\", random_state=1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"nnnqtAOXY4JG","colab_type":"code","outputId":"808564c8-a336-47f8-f807-38cbb99fd68a","executionInfo":{"status":"ok","timestamp":1572773601616,"user_tz":-330,"elapsed":400061,"user":{"displayName":"Charan Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAmUQs3ZyrBVa8DVyfsFABrw_sG3xpbPh5YeIoi2g=s64","userId":"11399043314986540413"}},"colab":{"base_uri":"https://localhost:8080/","height":121}},"source":["DT.fit(x_train, y_train)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=None,\n","                       max_features=None, max_leaf_nodes=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, presort=False,\n","                       random_state=1, splitter='best')"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"fzPVnhQ2Y8vG","colab_type":"code","colab":{}},"source":["Predictions=DT.predict(x_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VU44wggVZK4l","colab_type":"code","colab":{}},"source":["def plot_confusion_matrix(cm, classes,\n","                          normalize=True,\n","                          title='Confusion matrix',\n","                          cmap=plt.cm.Blues):\n","    \"\"\"\n","    This function prints and plots the confusion matrix.\n","    Normalization can be applied by setting `normalize=True`.\n","    \"\"\"\n","    if normalize:\n","        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n","        print(\"Normalized confusion matrix\")\n","    else:\n","        print('Confusion matrix, without normalization')\n","\n","    print(cm)\n","\n","    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n","    plt.title(title)\n","    plt.colorbar()\n","    tick_marks = np.arange(len(classes))\n","    plt.xticks(tick_marks, classes, rotation=45)\n","    plt.yticks(tick_marks, classes)\n","\n","    fmt = '.2f' if normalize else 'd'\n","    thresh = cm.max() / 2.\n","    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n","        plt.text(j, i, format(cm[i, j], fmt),\n","                 horizontalalignment=\"center\",\n","                 color=\"white\" if cm[i, j] > thresh else \"black\")\n","\n","    plt.ylabel('True label')\n","    plt.xlabel('Predicted label')\n","    plt.tight_layout()\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"d1Sr6nALa_j7","colab_type":"code","colab":{}},"source":["cnf_matrix = confusion_matrix(y_test, Predictions)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QtGGaSi-bBv7","colab_type":"code","outputId":"84a500fb-908d-486f-c4a5-efe65c805117","executionInfo":{"status":"ok","timestamp":1572773604907,"user_tz":-330,"elapsed":403326,"user":{"displayName":"Charan Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAmUQs3ZyrBVa8DVyfsFABrw_sG3xpbPh5YeIoi2g=s64","userId":"11399043314986540413"}},"colab":{"base_uri":"https://localhost:8080/","height":348}},"source":["plt.figure()\n","plot_confusion_matrix(cnf_matrix, classes=['MBP','BN'],\n","                      title='Confusion matrix, with normalization')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Normalized confusion matrix\n","[[0.73266881 0.26733119]\n"," [0.30470537 0.69529463]]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n3Pw/9WTNxRHbbY0AAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"hBvS4nX_bJpp","colab_type":"code","outputId":"024ce3c5-9680-442b-c014-d8c1abecc5d8","executionInfo":{"status":"ok","timestamp":1572773606617,"user_tz":-330,"elapsed":405021,"user":{"displayName":"Charan Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAmUQs3ZyrBVa8DVyfsFABrw_sG3xpbPh5YeIoi2g=s64","userId":"11399043314986540413"}},"colab":{"base_uri":"https://localhost:8080/","height":86}},"source":["tn, fp, fn, tp = confusion_matrix(y_test, Predictions).ravel()\n","print(\"True Negatives: \",tn)\n","print(\"False Positives: \",fp)\n","print(\"False Negatives: \",fn)\n","print(\"True Positives: \",tp)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["True Negatives:  595892\n","False Positives:  217425\n","False Negatives:  209236\n","True Positives:  477447\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rfXfWuTPbQi7","colab_type":"code","outputId":"effcc05b-5052-4c32-f1b1-af32b5a4470f","executionInfo":{"status":"ok","timestamp":1572773606620,"user_tz":-330,"elapsed":405010,"user":{"displayName":"Charan Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAmUQs3ZyrBVa8DVyfsFABrw_sG3xpbPh5YeIoi2g=s64","userId":"11399043314986540413"}},"colab":{"base_uri":"https://localhost:8080/","height":86}},"source":["Accuracy = (tn+tp)*100/(tp+tn+fp+fn) \n","print(\"Accuracy {:0.2f}%:\".format(Accuracy))\n","\n","Precision = tp/(tp+fp) \n","print(\"Precision {:0.2f}\".format(Precision))\n","\n","\n","Recall = tp/(tp+fn) \n","print(\"Recall {:0.2f}\".format(Recall))\n","\n","\n","f1 = (2*Precision*Recall)/(Precision + Recall)\n","print(\"F1 Score {:0.2f}\".format(f1))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Accuracy 71.56%:\n","Precision 0.69\n","Recall 0.70\n","F1 Score 0.69\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Vrsf__8Dbdtt","colab_type":"code","outputId":"edb7ce7c-45e3-4c76-dac2-cc42d6fc6721","executionInfo":{"status":"ok","timestamp":1572773608119,"user_tz":-330,"elapsed":406496,"user":{"displayName":"Charan Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAmUQs3ZyrBVa8DVyfsFABrw_sG3xpbPh5YeIoi2g=s64","userId":"11399043314986540413"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["DT.score(x_test,y_test)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7155593333333333"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"code","metadata":{"id":"2hsUQX-Pbino","colab_type":"code","colab":{}},"source":["F_imp=pd.Series(DT.feature_importances_,index=Features.columns)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"MB-w1pXwbl6_","colab_type":"code","outputId":"ef7c03ee-e4fe-475f-9eb3-1f17795b7c92","executionInfo":{"status":"ok","timestamp":1572773608123,"user_tz":-330,"elapsed":406483,"user":{"displayName":"Charan Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAmUQs3ZyrBVa8DVyfsFABrw_sG3xpbPh5YeIoi2g=s64","userId":"11399043314986540413"}},"colab":{"base_uri":"https://localhost:8080/","height":347}},"source":["print(F_imp)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["lepton 1PT                  0.146487\n","lepton 1 eta                0.052480\n","lepton 1 phi                0.036697\n","lepton 2PT                  0.033116\n","lepton 2 eta                0.044783\n","lepton 2 phi                0.036709\n","missing energy magnitude    0.274519\n","missing energy phi          0.036738\n","MET_rel                     0.036473\n","axial_MET                   0.053375\n","M_R                         0.025888\n","M_TR_2                      0.028225\n","R                           0.030049\n","MT2                         0.025967\n","S_R                         0.030089\n","M_Delta                     0.030227\n","dphi_r_b                    0.038756\n","cos(theta_r1)               0.039422\n","dtype: float64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"02lE265mbo38","colab_type":"code","colab":{}},"source":["nfolds = 10\n","def tn(y_true, Predictions): \n","\treturn confusion_matrix(y_true, Predictions)[0, 0]\n","def fp(y_true, Predictions): \n","\treturn confusion_matrix(y_true, Predictions)[0, 1]\n","def fn(y_true, Predictions): \n","\treturn confusion_matrix(y_true, Predictions)[1, 0]\n","def tp(y_true, Predictions): \n","\treturn confusion_matrix(y_true, Predictions)[1, 1]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jL17BXNGb9Kr","colab_type":"code","colab":{}},"source":["scoring = {'tp': make_scorer(tp), 'tn': make_scorer(tn),\n","           'fp': make_scorer(fp), 'fn': make_scorer(fn),\n","           'ac' : make_scorer(accuracy_score),\n","           're' : make_scorer(recall_score),\n","           'pr' : make_scorer(precision_score),\n","           'f1' : make_scorer(f1_score),\n","           'auc' : make_scorer(roc_auc_score),\n","          } "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"xS6IiyzCddwy","colab_type":"code","colab":{}},"source":["cv_results = cross_validate(DT, x_train, y_train, scoring=scoring, cv=StratifiedKFold(n_splits=nfolds, random_state=1))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LdHEQgYEdw9j","colab_type":"code","outputId":"f53a3096-5d3a-487c-c2e6-0deddce7b524","executionInfo":{"status":"ok","timestamp":1572776316034,"user_tz":-330,"elapsed":3114367,"user":{"displayName":"Charan Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAmUQs3ZyrBVa8DVyfsFABrw_sG3xpbPh5YeIoi2g=s64","userId":"11399043314986540413"}},"colab":{"base_uri":"https://localhost:8080/","height":278}},"source":["print('Cross Validation scores (nfolds = %d):'% nfolds)\n","print('tp: ', cv_results['test_tp'], '; mean:', cv_results['test_tp'].mean())\n","print('fn: ', cv_results['test_fn'], '; mean:', cv_results['test_fn'].mean())\n","print('fp: ', cv_results['test_fp'], '; mean:', cv_results['test_fp'].mean())\n","print('tn: ', cv_results['test_tn'], '; mean:', cv_results['test_tn'].mean())\n","print('ac: ', cv_results['test_ac'], '; mean:', cv_results['test_ac'].mean())\n","print('re: ', cv_results['test_re'], '; mean:', cv_results['test_re'].mean())\n","print('pr: ', cv_results['test_pr'], '; mean:', cv_results['test_pr'].mean())\n","print('f1: ', cv_results['test_f1'], '; mean:', cv_results['test_f1'].mean())\n","print('auc: ', cv_results['test_auc'], '; mean:', cv_results['test_auc'].mean())"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Cross Validation scores (nfolds = 10):\n","tp:  [111358 111056 111444 110925 111346 111000 111073 111647 111406 111104] ; mean: 111235.9\n","fn:  [48757 49059 48671 49190 48768 49114 49041 48467 48708 49010] ; mean: 48878.5\n","fp:  [50671 50608 50755 50809 50675 50959 50996 50379 50902 50968] ; mean: 50772.2\n","tn:  [139215 139278 139131 139077 139211 138927 138889 139506 138983 138917] ; mean: 139113.4\n","ac:  [0.71592081 0.71523796 0.71592653 0.71428939 0.71587714 0.71407714\n"," 0.71417918 0.71758205 0.71539919 0.71434776] ; mean: 0.7152837143238553\n","re:  [0.69548762 0.69360147 0.69602473 0.69278331 0.69541702 0.69325606\n"," 0.69371198 0.69729693 0.69579175 0.69390559] ; mean: 0.6947276453669659\n","pr:  [0.68727203 0.68695566 0.68708192 0.68584837 0.6872319  0.68535864\n"," 0.6853439  0.68906842 0.68638638 0.68552248] ; mean: 0.6866069699266717\n","f1:  [0.69135542 0.69026257 0.69152441 0.6892984  0.69130023 0.68928473\n"," 0.68950255 0.69315825 0.69105706 0.68968856] ; mean: 0.690643219145445\n","auc:  [0.71431902 0.71354183 0.71436639 0.71260349 0.71427318 0.71244489\n"," 0.71257471 0.71599186 0.71386212 0.71274525] ; mean: 0.7136722734491069\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Lf4PRYKeedxm","colab_type":"code","colab":{}},"source":["def evaluate_model(model, features, labels):\n","    pred = model.predict(features)\n","    accuracy = round(accuracy_score(labels, pred), 3)\n","    precision = round(precision_score(labels, pred), 3)\n","    recall = round(recall_score(labels, pred), 3)\n","    print('Accuracy: {} / Precision: {} / Recall: {}'.format(\n","                                                                           accuracy,\n","                                                                                   precision,\n","                                                                                   recall\n","                                                                                  ))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hZXnw8KDfZvX","colab_type":"code","outputId":"0807c8c0-4211-4096-b324-c8622b111411","executionInfo":{"status":"ok","timestamp":1572776319078,"user_tz":-330,"elapsed":3117392,"user":{"displayName":"Charan Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAmUQs3ZyrBVa8DVyfsFABrw_sG3xpbPh5YeIoi2g=s64","userId":"11399043314986540413"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["evaluate_model(DT,x_test,y_test)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Accuracy: 0.716 / Precision: 0.687 / Recall: 0.695\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"zGCQAudgpbEe","colab_type":"code","colab":{}},"source":["import sklearn.metrics as metrics\n","probs = DT.predict_proba(x_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"oV0ffFAbrDIb","colab_type":"code","colab":{}},"source":["preds = probs[:,1]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zWSJLleNrHKo","colab_type":"code","colab":{}},"source":["fpr, tpr, threshold = metrics.roc_curve(y_test, preds)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"iGyCcM_WrJuF","colab_type":"code","colab":{}},"source":["roc_auc = metrics.auc(fpr, tpr)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"P25h_9h7rLyk","colab_type":"code","outputId":"11a4f74d-5fef-4647-b7c6-a35bdb5034c7","executionInfo":{"status":"ok","timestamp":1572776320663,"user_tz":-330,"elapsed":3118955,"user":{"displayName":"Charan Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAmUQs3ZyrBVa8DVyfsFABrw_sG3xpbPh5YeIoi2g=s64","userId":"11399043314986540413"}},"colab":{"base_uri":"https://localhost:8080/","height":295}},"source":["import matplotlib.pyplot as plt\n","plt.title('ROC DT On Entire Dataset')\n","plt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\n","plt.legend(loc = 'lower right')\n","plt.plot([0, 1], [0, 1],'r--')\n","plt.xlim([0, 1])\n","plt.ylim([0, 1])\n","plt.ylabel('True Positive Rate')\n","plt.xlabel('False Positive Rate')\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nnCvQ/wNEG87pAcHKkQAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"ZnjShLxxrPwq","colab_type":"code","colab":{}},"source":["from sklearn.ensemble import  BaggingClassifier"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kUT_628rtntD","colab_type":"code","colab":{}},"source":["B_DT=BaggingClassifier(base_estimator=DT_Model, n_estimators=10, random_state=1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3SMgCLTMt1W5","colab_type":"code","outputId":"72132086-b562-4d28-b509-4a9bc0eefcae","executionInfo":{"status":"ok","timestamp":1572776321139,"user_tz":-330,"elapsed":3119419,"user":{"displayName":"Charan Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAmUQs3ZyrBVa8DVyfsFABrw_sG3xpbPh5YeIoi2g=s64","userId":"11399043314986540413"}},"colab":{"base_uri":"https://localhost:8080/","height":295}},"source":["print(B_DT)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["BaggingClassifier(base_estimator=DecisionTreeClassifier(class_weight=None,\n","                                                        criterion='gini',\n","                                                        max_depth=None,\n","                                                        max_features=None,\n","                                                        max_leaf_nodes=None,\n","                                                        min_impurity_decrease=0.0,\n","                                                        min_impurity_split=None,\n","                                                        min_samples_leaf=1,\n","                                                        min_samples_split=2,\n","                                                        min_weight_fraction_leaf=0.0,\n","                                                        presort=False,\n","                                                        random_state=1,\n","                                                        splitter='best'),\n","                  bootstrap=True, bootstrap_features=False, max_features=1.0,\n","                  max_samples=1.0, n_estimators=10, n_jobs=None,\n","                  oob_score=False, random_state=1, verbose=0, warm_start=False)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"mBh5-HpTt78K","colab_type":"code","colab":{}},"source":["B_DT.fit(x_train,y_train)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"xcckibtjuM2g","colab_type":"code","colab":{}},"source":["y_pred=B_DT.predict(x_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"afdggSavsZCU","colab_type":"code","colab":{}},"source":["def plot_confusion_matrix(cm, classes,\n","                          normalize=True,\n","                          title='Confusion matrix',\n","                          cmap=plt.cm.Blues):\n","    \"\"\"\n","    This function prints and plots the confusion matrix.\n","    Normalization can be applied by setting `normalize=True`.\n","    \"\"\"\n","    if normalize:\n","        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n","        print(\"Normalized confusion matrix\")\n","    else:\n","        print('Confusion matrix, without normalization')\n","\n","    print(cm)\n","\n","    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n","    plt.title(title)\n","    plt.colorbar()\n","    tick_marks = np.arange(len(classes))\n","    plt.xticks(tick_marks, classes, rotation=45)\n","    plt.yticks(tick_marks, classes)\n","\n","    fmt = '.2f' if normalize else 'd'\n","    thresh = cm.max() / 2.\n","    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n","        plt.text(j, i, format(cm[i, j], fmt),\n","                 horizontalalignment=\"center\",\n","                 color=\"white\" if cm[i, j] > thresh else \"black\")\n","\n","    plt.ylabel('True label')\n","    plt.xlabel('Predicted label')\n","    plt.tight_layout()\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"q5bmarkVtSJL","colab_type":"code","colab":{}},"source":["cnf_matrix = confusion_matrix(y_test, y_pred)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eQ_ao_7itU4V","colab_type":"code","colab":{}},"source":["plt.figure()\n","plot_confusion_matrix(cnf_matrix, classes=['MBP','BN'],\n","                      title='Confusion matrix, without normalization')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"pPhEhd8ptWuB","colab_type":"code","colab":{}},"source":["tn, fp, fn, tp = confusion_matrix(y_test, y_pred).ravel()\n","print(\"True Negatives: \",tn)\n","print(\"False Positives: \",fp)\n","print(\"False Negatives: \",fn)\n","print(\"True Positives: \",tp)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"O9m1RXNsta90","colab_type":"code","colab":{}},"source":["Accuracy = (tn+tp)*100/(tp+tn+fp+fn) \n","print(\"Accuracy {:0.2f}%:\".format(Accuracy))\n","\n","Precision = tp/(tp+fp) \n","print(\"Precision {:0.2f}\".format(Precision))\n","\n","\n","Recall = tp/(tp+fn) \n","print(\"Recall {:0.2f}\".format(Recall))\n","\n","\n","f1 = (2*Precision*Recall)/(Precision + Recall)\n","print(\"F1 Score {:0.2f}\".format(f1))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"n9Ax4WZdte0v","colab_type":"code","colab":{}},"source":["B_DT.score(x_test,y_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1xmEV2mRtmJ4","colab_type":"code","colab":{}},"source":["nfolds = 10\n","def tn(y_true, y_pred): \n","\treturn confusion_matrix(y_true, y_pred)[0, 0]\n","def fp(y_true, y_pred): \n","\treturn confusion_matrix(y_true, y_pred)[0, 1]\n","def fn(y_true, y_pred): \n","\treturn confusion_matrix(y_true, y_pred)[1, 0]\n","def tp(y_true, y_pred): \n","\treturn confusion_matrix(y_true, y_pred)[1, 1]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"70Njt_-uuGT3","colab_type":"code","colab":{}},"source":["scoring = {'tp': make_scorer(tp), 'tn': make_scorer(tn),\n","           'fp': make_scorer(fp), 'fn': make_scorer(fn),\n","           'ac' : make_scorer(accuracy_score),\n","           're' : make_scorer(recall_score),\n","           'pr' : make_scorer(precision_score),\n","           'f1' : make_scorer(f1_score),\n","           'auc' : make_scorer(roc_auc_score),\n","          } "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JqaUdAeHATIB","colab_type":"code","colab":{}},"source":["import sklearn.metrics as metrics\n","probs = B_DT.predict_proba(x_test)\n","preds = probs[:,1]\n","fpr, tpr, threshold = metrics.roc_curve(y_test, preds)\n","roc_auc = metrics.auc(fpr, tpr)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1OfcDhaoAl-Q","colab_type":"code","colab":{}},"source":["import matplotlib.pyplot as plt\n","plt.title('ROC of Bagging Classifier on Entire Dataset')\n","plt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\n","plt.legend(loc = 'lower right')\n","plt.plot([0, 1], [0, 1],'r--')\n","plt.xlim([0, 1])\n","plt.ylim([0, 1])\n","plt.ylabel('True Positive Rate')\n","plt.xlabel('False Positive Rate')\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9dIbikdHuIMC","colab_type":"code","colab":{}},"source":["cv_results = cross_validate(B_DT, x_train, y_train, scoring=scoring, cv=StratifiedKFold(n_splits=nfolds, random_state=1))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KH7HWpfwJLzB","colab_type":"code","colab":{}},"source":["print('Cross Validation scores (nfolds = %d):'% nfolds)\n","print('tp: ', cv_results['test_tp'], '; mean:', cv_results['test_tp'].mean())\n","print('fn: ', cv_results['test_fn'], '; mean:', cv_results['test_fn'].mean())\n","print('fp: ', cv_results['test_fp'], '; mean:', cv_results['test_fp'].mean())\n","print('tn: ', cv_results['test_tn'], '; mean:', cv_results['test_tn'].mean())\n","print('ac: ', cv_results['test_ac'], '; mean:', cv_results['test_ac'].mean())\n","print('re: ', cv_results['test_re'], '; mean:', cv_results['test_re'].mean())\n","print('pr: ', cv_results['test_pr'], '; mean:', cv_results['test_pr'].mean())\n","print('f1: ', cv_results['test_f1'], '; mean:', cv_results['test_f1'].mean())\n","print('auc: ', cv_results['test_auc'], '; mean:', cv_results['test_auc'].mean())"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wZyuvLETJRBc","colab_type":"code","colab":{}},"source":["l\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"CgCoOuL6JS7c","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ppxmN5QxJUjr","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7bEzndueJW_Z","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}